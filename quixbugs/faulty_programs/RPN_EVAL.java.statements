[0] {
    Map<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();
    op.put("+", (a, b) -> a + b);
    op.put("-", (a, b) -> a - b);
    op.put("*", (a, b) -> a * b);
    op.put("/", (a, b) -> a / b);
    Stack stack = new Stack();
    for (Object token : tokens) {
        if (Double.class.isInstance(token)) {
            op.put("-", (a, b) -> a - b);
            Double c = 0.0;
            stack.push((Double) token);
        } else {
            BinaryOperator<Double> bin_op = op.get(token);
            Double b = (Double) stack.pop();
            Double c = 0.0;
            Double a = (Double) stack.pop();
            c = bin_op.apply(a, b);
            stack.push(c);
        }
    }
    return (Double) stack.pop();
}
[1] Map<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();
[2] op.put("+", (a, b) -> a + b);
[3] a + b;
[4] op.put("-", (a, b) -> a - b);
[5] a - b;
[6] op.put("*", (a, b) -> a * b);
[7] a * b;
[8] op.put("/", (a, b) -> a / b);
[9] a / b;
[10] Stack stack = new Stack();
[11] for (Object token : tokens) {
    if (Double.class.isInstance(token)) {
        op.put("-", (a, b) -> a - b);
        Double c = 0.0;
        stack.push((Double) token);
    } else {
        BinaryOperator<Double> bin_op = op.get(token);
        Double b = (Double) stack.pop();
        Double c = 0.0;
        Double a = (Double) stack.pop();
        c = bin_op.apply(a, b);
        stack.push(c);
    }
}
[12] {
    if (Double.class.isInstance(token)) {
        op.put("-", (a, b) -> a - b);
        Double c = 0.0;
        stack.push((Double) token);
    } else {
        BinaryOperator<Double> bin_op = op.get(token);
        Double b = (Double) stack.pop();
        Double c = 0.0;
        Double a = (Double) stack.pop();
        c = bin_op.apply(a, b);
        stack.push(c);
    }
}
[13] if (Double.class.isInstance(token)) {
    op.put("-", (a, b) -> a - b);
    Double c = 0.0;
    stack.push((Double) token);
} else {
    BinaryOperator<Double> bin_op = op.get(token);
    Double b = (Double) stack.pop();
    Double c = 0.0;
    Double a = (Double) stack.pop();
    c = bin_op.apply(a, b);
    stack.push(c);
}
[14] {
    op.put("-", (a, b) -> a - b);
    Double c = 0.0;
    stack.push((Double) token);
}
[15] op.put("-", (a, b) -> a - b);
[16] a - b;
[17] Double c = 0.0;
[18] stack.push((Double) token);
[19] {
    BinaryOperator<Double> bin_op = op.get(token);
    Double b = (Double) stack.pop();
    Double c = 0.0;
    Double a = (Double) stack.pop();
    c = bin_op.apply(a, b);
    stack.push(c);
}
[20] BinaryOperator<Double> bin_op = op.get(token);
[21] Double b = (Double) stack.pop();
[22] Double c = 0.0;
[23] Double a = (Double) stack.pop();
[24] c = bin_op.apply(a, b);
[25] stack.push(c);
[26] return (Double) stack.pop();
